version: "3.8"
services:
  app:
    build: ./app/
    image: kc-syth-api:latest
    container_name: kc-syth-api
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./app:/app
      - audio_files:/app/output
    networks:
      - kc-syth-network
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  web:
    image: nginx:latest
    container_name: kc-syth-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - kc-syth-network

  ui:
    image: python:3.10-slim
    container_name: kc-syth-ui
    restart: unless-stopped
    working_dir: /ui
    volumes:
      - ./streamlit_app:/ui
    command: bash -c "pip install --no-cache-dir -r requirements.txt && streamlit run app.py --server.port=8501 --server.address=0.0.0.0"
    environment:
      - BACKEND_URL=http://app:8080
    ports:
      - "8501:8501"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - kc-syth-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: on-failure
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kc-syth-network
  worker-1:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: ml-worker-1
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - WORKER_ID=worker-1
    volumes:
      - ./app/database:/app/database
      - audio_files:/app/output
    networks:
      - kc-syth-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  worker-2:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: ml-worker-2
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - WORKER_ID=worker-2
    volumes:
      - ./app/database:/app/database
      - audio_files:/app/output
    networks:
      - kc-syth-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy

  db:
    image: postgres:latest
    container_name: my_postgres_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - kc-syth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "8081:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - kc-syth-network

networks:
  kc-syth-network:
    name: kc-syth-network
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  rabbitmq_log:
  audio_files:
    driver: local